<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <!-- 加载时扫描除controller的注解，controller在spring mvc文件中扫描 -->
    <context:component-scan base-package="com.xiami">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!-- 引入spring-data-redis.xml -->
    <import resource="spring-data-redis.xml"/>

    <!-- 加载properties资源文件 -->
    <bean class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据库连接类 -->
        <property name="driverClassName" value="${dataSource.className}"/>
        <!-- 数据库url -->
        <property name="url" value="${dataSource.url}"/>
        <!-- 用户名 -->
        <property name="username" value="${dataSource.username}"/>
        <!-- 密码 -->
        <property name="password" value="${dataSource.password}"/>
        <!-- 初始化连接数 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <!-- 最小连接数 -->
        <property name="minIdle" value="${druid.minIdle}"/>
        <!-- 最大连接数 -->
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 最大等待时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>
        <!-- 连接在池中最小生存的时间 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>
        <!-- 检测连接是否有效的语句 -->
        <property name="validationQuery" value="${druid.validationQuery}"/>
        <!-- 连接的时候检测空闲时间大于timeBetweenEvictionRunsMillis的连接是否有效，执行validationQuery -->
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${druid.testOnReturn}"/>
        <!-- 启用PSCache -->
        <property name="poolPreparedStatements" value="true"/>
        <!-- 指定每个连接上PSCache的大小 -->
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>
        <!-- 控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="${druid.filters}"/>
    </bean>

    <!-- 配置mybatis -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <property name="mapperLocations" value="classpath*:/mapper/*.xml"/>
    </bean>

    <!-- 通过扫描的模式，扫描目录在com/qk/mapper目录下，所有的mapper都继承SqlMapper接口的接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.xiami.mapper"/>
        <property name="markerInterface" value="com.xiami.mapper.SqlMapper"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置事务传播方式 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="query*" propagation="NOT_SUPPORTED"/>
            <tx:method name="get*" propagation="NOT_SUPPORTED"/>
            <tx:method name="find*" propagation="NOT_SUPPORTED"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!-- 配置事务切面 -->
    <aop:config proxy-target-class="true">
        <aop:advisor pointcut="execution(* com.xiami.service..*.*(..))" advice-ref="txAdvice"/>
    </aop:config>

    <!-- 开启定时器注解 -->
    <task:annotation-driven/>


    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置上传文件的最大尺寸为5MB -->
        <!--<property name="maxUploadSize" value="5242880" />-->
        <property name="defaultEncoding" value="UTF-8" />
    </bean>
</beans>