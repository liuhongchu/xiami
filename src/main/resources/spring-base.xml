<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <!-- 加载时扫描除controller的注解，controller在spring mvc文件中扫描 -->
    <context:component-scan base-package="com.xiami">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!-- 引入spring-data-redis.xml -->
    <import resource="spring-data-redis.xml"/>

    <!--&lt;!&ndash; 加载properties资源文件 &ndash;&gt;-->
    <!--<bean class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">-->
        <!--<property name="locations">-->
            <!--<list>-->
                <!--<value>classpath:jdbc.properties</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 配置数据源 &ndash;&gt;-->
    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
        <!--&lt;!&ndash; 数据库连接类 &ndash;&gt;-->
        <!--<property name="driverClassName" value="${dataSource.className}"/>-->
        <!--&lt;!&ndash; 数据库url &ndash;&gt;-->
        <!--<property name="url" value="${dataSource.url}"/>-->
        <!--&lt;!&ndash; 用户名 &ndash;&gt;-->
        <!--<property name="username" value="${dataSource.username}"/>-->
        <!--&lt;!&ndash; 密码 &ndash;&gt;-->
        <!--<property name="password" value="${dataSource.password}"/>-->
        <!--&lt;!&ndash; 初始化连接数 &ndash;&gt;-->
        <!--<property name="initialSize" value="${druid.initialSize}"/>-->
        <!--&lt;!&ndash; 最小连接数 &ndash;&gt;-->
        <!--<property name="minIdle" value="${druid.minIdle}"/>-->
        <!--&lt;!&ndash; 最大连接数 &ndash;&gt;-->
        <!--<property name="maxActive" value="${druid.maxActive}"/>-->
        <!--&lt;!&ndash; 最大等待时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="${druid.maxWait}"/>-->
        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>-->
        <!--&lt;!&ndash; 连接在池中最小生存的时间 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>-->
        <!--&lt;!&ndash; 检测连接是否有效的语句 &ndash;&gt;-->
        <!--<property name="validationQuery" value="${druid.validationQuery}"/>-->
        <!--&lt;!&ndash; 连接的时候检测空闲时间大于timeBetweenEvictionRunsMillis的连接是否有效，执行validationQuery &ndash;&gt;-->
        <!--<property name="testWhileIdle" value="${druid.testWhileIdle}"/>-->
        <!--<property name="testOnBorrow" value="${druid.testOnBorrow}"/>-->
        <!--<property name="testOnReturn" value="${druid.testOnReturn}"/>-->
        <!--&lt;!&ndash; 启用PSCache &ndash;&gt;-->
        <!--<property name="poolPreparedStatements" value="true"/>-->
        <!--&lt;!&ndash; 指定每个连接上PSCache的大小 &ndash;&gt;-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize"-->
                  <!--value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>-->
        <!--&lt;!&ndash; 控统计拦截的filters，去掉后监控界面sql无法统计 &ndash;&gt;-->
        <!--<property name="filters" value="${druid.filters}"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 配置mybatis &ndash;&gt;-->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--<property name="configLocation" value="classpath:mybatis.xml"/>-->
        <!--<property name="mapperLocations" value="classpath*:/mapper/*.xml"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 通过扫描的模式，扫描目录在com/qk/mapper目录下，所有的mapper都继承SqlMapper接口的接口 &ndash;&gt;-->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--<property name="basePackage" value="com.xiami.mapper"/>-->
        <!--<property name="markerInterface" value="com.xiami.mapper.SqlMapper"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 配置事务管理器 &ndash;&gt;-->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 配置事务传播方式 &ndash;&gt;-->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="add*" propagation="REQUIRED"/>-->
            <!--<tx:method name="save*" propagation="REQUIRED"/>-->
            <!--<tx:method name="insert*" propagation="REQUIRED"/>-->
            <!--<tx:method name="update*" propagation="REQUIRED"/>-->
            <!--<tx:method name="delete*" propagation="REQUIRED"/>-->
            <!--<tx:method name="query*" propagation="NOT_SUPPORTED"/>-->
            <!--<tx:method name="get*" propagation="NOT_SUPPORTED"/>-->
            <!--<tx:method name="find*" propagation="NOT_SUPPORTED"/>-->
            <!--<tx:method name="*" propagation="REQUIRED"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--&lt;!&ndash; 配置事务切面 &ndash;&gt;-->
    <!--<aop:config proxy-target-class="true">-->
        <!--<aop:advisor pointcut="execution(* com.xiami.service..*.*(..))" advice-ref="txAdvice"/>-->
    <!--</aop:config>-->

    <!-- 开启定时器注解 -->
    <task:annotation-driven/>


    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置上传文件的最大尺寸为5MB -->
        <!--<property name="maxUploadSize" value="5242880" />-->
        <property name="defaultEncoding" value="UTF-8" />
    </bean>
</beans>